#-*-CODING:UTF-8-*-
"""
CREATEDONMONJUN2211:21:002015

@AUTHOR:TYLER
FRI-FAILUREANALYSISPIPELINE
COPYRIGHTTYLERCAMP2015
MODULE:ANALYSIS
"""
FROMBIOIMPORTSEQIO
FROMBIOIMPORTALIGNIO
IMPORTOS
IMPORTRE
FROMDECIMALIMPORT*

DEFTRIM_N(SEQ):
"""TRIMTHE5'AND3'ENDSOFSANGERREADS."""
#TRIM5'END
I=0
SKIP=FALSE
DONE=FALSE
WHILE(I<LEN(SEQ.SEQ))ANDNOT(DONE):
IF(SEQ.SEQ[I]!="N"):
FORJINRANGE(10):
IF(SEQ.SEQ[I+J+1]=="N"):
SKIP=TRUE
I+=1
BREAK
IF(SKIP):
I+=1
SKIP=FALSE
CONTINUE
ELIFNOT(SKIP):
SEQ=SEQ[I:]
DONE=TRUE
ELSE:
I+=1


#TRIM3'END
J=I
DONE=FALSE
WHILE(J<LEN(SEQ.SEQ))ANDNOT(DONE):
IF(((SEQ.LETTER_ANNOTATIONS.VALUES()[0][J]+
SEQ.LETTER_ANNOTATIONS.VALUES()[0][J+1]+
SEQ.LETTER_ANNOTATIONS.VALUES()[0][J+2])/3)
<10):
SEQ=SEQ[I:J]
DONE=TRUE
BREAK
J+=1
RETURNSEQ

DEFSEQPROC(READ_PATH,PLASMID_PATH,TEMPLATE_PATH,MOB_PATH):
"""CREATETEMPLATESTHATWILLBELATERALIGNEDWITHMAFFT"""

#CREATELISTCONTAININGMOBILEELEMENTS
MOB_LIST=LIST()
FORDIRNAME,SUBDIRLIST,FILELISTINOS.WALK(MOB_PATH):
FORFINFILELIST:
MOB_SEQ=SEQIO.READ(DIRNAME+F,"GENBANK")
MOB_RC=MOB_SEQ.REVERSE_COMPLEMENT()
MOB_RC.ID=MOB_SEQ.ID+"-REVERSE_COMPLEMENT"
MOB_LIST.APPEND(MOB_SEQ)
MOB_LIST.APPEND(MOB_RC)

FORDIRNAME,SUBDIRLIST,FILELISTINOS.WALK(PLASMID_PATH):
FORPLASMID_FILEINFILELIST:
READ_LIST=LIST()
INITIALS=""
PLASMID=SEQIO.READ(PLASMID_PATH+PLASMID_FILE,"GENBANK")#OBJECTCONTAININGPLASMIDINFO
TEMP=PLASMID_FILE
DEST=[]
DEST=RE.SPLIT("_",TEMP)#GETINITIALSFROMPLASMIDFILENAME
INITIALS=DEST[0].LOWER()
FORDIRNAME2,SUBDIRLIST2,FILELIST2INOS.WALK(READ_PATH):
FORREAD_FILEINFILELIST2:
IF(INITIALSINREAD_FILE.LOWER()):
OUT_FILE=SEQIO.READ(READ_PATH+READ_FILE,"ABI")
TRIMMED_FILE=TRIM_N(OUT_FILE)#TRIMN'S
READ_LIST.APPEND(TRIMMED_FILE)

#ATTHISPOINTWEHAVEALISTOFALLSANGERREADSCORRESPONDINGTOOURCURRENTPLASMIDFILE.
#ENDSHAVEBEENTRIMMEDOFN'S.

FORI,SEQUENCEINENUMERATE(READ_LIST):
FORJ,MOB_SEQINENUMERATE(MOB_LIST):
TEMP_LST=[SEQUENCE,MOB_SEQ]
SEQIO.WRITE(TEMP_LST,TEMPLATE_PATH+"RM"+STR(I)+STR(J)+"_"+INITIALS,"FASTA")
DEL(TEMP_LST)
FORI,SEQUENCEINENUMERATE(READ_LIST):
TEMP_LST=[PLASMID,SEQUENCE]
SEQIO.WRITE(TEMP_LST,TEMPLATE_PATH+"PR"+STR(I)+"_"+INITIALS,"FASTA")
DEL(TEMP_LST)
RETURN

DEFGET_SEQ_LIST(SEQ_PATH):
"""RETURNALISTOFSEQOBJECTSFROMGENBANKFILESLOCATEDINSEQ_PATH."""
SEQ_LIST=[]
FORDIRNAME,SUBDIRLIST,FILELISTINOS.WALK(SEQ_PATH):
FORFINFILELIST:
SEQ_LIST.APPEND(SEQIO.READ(DIRNAME+F,"GENBANK"))
RETURNSEQ_LIST
DEFGET_INDICES(SEQ):
"""DETERMINESTARTANDSTOPINDICESFORANALYSIS.

OBTAINSTARTANDSTOPINDICESFORANALYZINGASINGLEALIGNMENT
WITHINAMULTIPLESEQUENCEALIGNMENTFILE.THISSEQUENCESHOULDBE
SMALLERTHANYOURTEMPLATE."""
START=0
STOP=LEN(SEQ.SEQ)-1
WHILE((SEQ.SEQ[STOP]=="-")AND(STOP>0)):
STOP-=1
IF(STOP==0):
PRINT"ERROR:STOP_INDEX=0FORSEQUENCE",SEQ.ID
RETURN
WHILE(SEQ.SEQ[START]=="-")AND(START<LEN(SEQ.SEQ)):
START+=1
IF(START>=LEN(SEQ.SEQ)):
PRINT"ERROR:START>=LENGTHFORSEQUENCE",SEQ.ID
RETURN
IF(START>STOP):
PRINT"ERROR:START>STOPFORSEQUENCE",SEQ.ID
RETURN
IF(STOP>LEN(SEQ.SEQ)):
PRINT"ERROR:STOP>LEN(SEQ.SEQ)FORSEQUENCE",SEQ.ID
#PRINT"RETURNING",START,STOP,"FORSEQ",SEQ.ID
RETURN[START,STOP]
DEFGET_SUB_REP(SEQ_FRAG):
"""RETURNTHELENGTHOFTHESMALLESTREPEATEDSEQUENCEINTHE
SEQUENCEFRAGMENT,ANDHOWMANYTIMESTHESEQUENCEISREPEATED."""
REPEAT_NUM=1
FORXINRANGE(1,LEN(SEQ_FRAG)):
I=X
J=0
WHILE(I<LEN(SEQ_FRAG)ANDSTR(SEQ_FRAG[J:I])==STR(SEQ_FRAG[I:I+X])):
REPEAT_NUM+=1
I+=X
J+=X
IF(REPEAT_NUM*X==LEN(SEQ_FRAG)):
RETURN[SEQ_FRAG[:X],REPEAT_NUM]
ELSE:
REPEAT_NUM=1

RETURN[SEQ_FRAG,1]

#DETERMINENUMBEROFREPEATS,IFANY
DEFBUILD_REPEAT_STRING(SEQ,X,MUT_LENGTH,INS):
"""DETERMINENUMBEROFREPEATEDSEQUENCESINSEQ.

STARTINGFROMSEQ[X],DETERMINETHENUMBEROFREPEATEDUNITS
OFLENGTHMUT_LENGTHDIRECTLYDOWNSTREAMORUPSTREAMOF
SEQ[X:X+MUT_LENGTH].
ARG:INSISBOOLEAN(1->INSERTION,0->DELETION"""

SEQ_STR=STR.REPLACE("-","",STR(SEQ))
SUB_REP=GET_SUB_REP(SEQ_STR[X:X+MUT_LENGTH])
REPEAT_SEQ=SUB_REP[0]
DELTA_UNITS=SUB_REP[1]#NUMBEROFREPEATEDUNITSDELETED/INSERTED
#DETERMINEIFREADSEQUENCECONTAINSREPEATS
#NOWWEMUSTFINDTHEBOUNDSOFTHEREADREPEATSEQUENCE
REPEAT_LEN=LEN(REPEAT_SEQ)
START_INDEX=X
STOP_INDEX=X+REPEAT_LEN
SKIP=MUT_LENGTH-1
IF(REPEAT_LEN<=0):
PRINT"ERROR:REPEAT_LEN<=0"
RETURN["",SKIP]
#FIRST,WEMOVETOWARDTHE5'ENDBYREPEAT_LENEACHITERATION
WHILE(STR(SEQ_STR[START_INDEX:START_INDEX+REPEAT_LEN])
==STR(SEQ_STR[START_INDEX-REPEAT_LEN:START_INDEX])ANDSTART_INDEX>0):
START_INDEX-=REPEAT_LEN

#NOW,WEMOVETOWARDTHE3'ENDINTHESAMEMANNER
WHILE(STR(SEQ_STR[STOP_INDEX-REPEAT_LEN:STOP_INDEX])
==STR(SEQ_STR[STOP_INDEX:STOP_INDEX+REPEAT_LEN])AND(STOP_INDEX+REPEAT_LEN)<LEN(SEQ_STR)):
STOP_INDEX+=REPEAT_LEN

REPEAT_REF_NUM=(STOP_INDEX-START_INDEX)/REPEAT_LEN
IF(REPEAT_REF_NUM==1ANDDELTA_UNITS==1):
#NOTREPEATMEDIATED
RETURN["",SKIP]
ELIF(REPEAT_LEN*REPEAT_REF_NUM>=5):
#MEETSGENOMEDIFFCRITERIAFORRMD/RMI
REPEAT_NEW_COPIES=0
IF(INS):
REPEAT_NEW_COPIES=REPEAT_REF_NUM+DELTA_UNITS
ELSE:
REPEAT_NEW_COPIES=REPEAT_REF_NUM-DELTA_UNITS
ERRATA=("\TREPEAT_SEQ="+REPEAT_SEQ+"\TREPEAT_LEN="+STR(REPEAT_LEN)+"\T"+
"REPEAT_REF_NUM="+STR(REPEAT_REF_NUM)+"\TREPEAT_NEW_COPIES="+
STR(REPEAT_NEW_COPIES))
RETURN[ERRATA,SKIP]
ELSE:
RETURN["",SKIP]

DEFANALYZE_SEQ(TEMPLATE,TARGET,START_INDEX,STOP_INDEX,MUTATION_LIST):
"""ANALYZEANALIGNMENTBETWEENTEMPLATEANDTARGET
BETWEENTHEGIVENINDICES."""
TEMPLATE_SEQ=TEMPLATE.SEQ
TARGET_SEQ=TARGET.SEQ
TEMPLATE_ID=TEMPLATE.ID
IF("REVERSE_COMPLEMENT"INTEMPLATE_ID):
TEMPLATE_ID=(RE.SPLIT("-",TEMPLATE_ID))[0]
INS_COUNT=0#TOTALNUMBEROFNTSINSERTED
DEL_COUNT=0#TOTALNUMBEROFNTSDELETED
SKIP=0

TRUE_COUNT=0
FORXINRANGE(START_INDEX,STOP_INDEX):
#CALCULATE"TRUEINDEX"TOMAPMUTATIONSONTOREFERENCESEQUENCE
#ONLYTHINGSTHATAFFECTINDEXINTOREFERENCEARESTARTINDEXANDTOTALNUMBEROFINSERTEDBASES
REF_INDEX=X-INS_COUNT
IF(SKIP):
SKIP-=1
CONTINUE
TEMPLATE_NT=TEMPLATE.SEQ[X]
TARGET_NT=TARGET.SEQ[X]
IF(TARGET_NT!=TEMPLATE_NT):
IF(TARGET_NT=="N"):
#USELESS!
CONTINUE
ELIF(TARGET_NT=="-"ANDTEMPLATE_NT!="-"):
#DELETION
Z=X
IGNORE_COUNT=0
WHILE(Z<LEN(TARGET_SEQ)ANDTARGET_SEQ[Z]=="-"):
IF(TEMPLATE_SEQ[Z]=="-"):#INTERRUPTEDBYVIRTUEOFBEINGAMULTIPLESEQALIGNMENT
IGNORE_COUNT+=1
Z+=1
DEL_LENGTH=Z-X-IGNORE_COUNT
DEL_COUNT+=DEL_LENGTH
MUTATION_STRING=("DEL\T.\T.\T"+
TEMPLATE_ID+"\T"+
STR(REF_INDEX)+"\T"+STR(DEL_LENGTH))
ERRATA=BUILD_REPEAT_STRING(TEMPLATE_SEQ,X,DEL_LENGTH,0)
IF(ERRATA[0]!=""):
MUTATION_LIST.APPEND(MUTATION_STRING+ERRATA[0])
ELSE:
MUTATION_LIST.APPEND(MUTATION_STRING)
SKIP=ERRATA[1]+IGNORE_COUNT#NUMBEROFNTTOSKIP
IF((SKIP+X)>=STOP_INDEX):
RETURNDECIMAL(TRUE_COUNT)/DECIMAL(STOP_INDEX-START_INDEX)

ELIF(TEMPLATE_NT=="-"ANDTARGET_NT!="-"):
#INSERTION
Z=X
IGNORE_COUNT=0
WHILE(Z<LEN(TEMPLATE_SEQ)ANDTEMPLATE_SEQ[Z]=="-"):
IF(TARGET_SEQ[Z]=="-"):
IGNORE_COUNT+=1
Z+=1
INS_LENGTH=Z-X-IGNORE_COUNT
INS_COUNT+=INS_LENGTH
MUTATION_STRING=("INS\T.\T.\T"+
TEMPLATE_ID+"\T"+
STR(REF_INDEX)+"\T"+STR(TARGET_SEQ[X:X+INS_LENGTH]))
ERRATA=BUILD_REPEAT_STRING(TARGET_SEQ,X,INS_LENGTH,1)
IF(ERRATA[0]!=""):
MUTATION_LIST.APPEND(MUTATION_STRING+ERRATA[0])
ELSE:
MUTATION_LIST.APPEND(MUTATION_STRING)
SKIP=ERRATA[1]+IGNORE_COUNT
IF((SKIP+X)>=STOP_INDEX):
RETURNDECIMAL(TRUE_COUNT)/DECIMAL(STOP_INDEX-START_INDEX)
ELSE:
MUTATION_STRING="SNP\T.\T.\T"+TEMPLATE_ID+"\T"+STR(REF_INDEX)+"\T"+TARGET_NT
MUTATION_LIST.APPEND(MUTATION_STRING)
ELSE:
TRUE_COUNT+=1
VALIDITY=DECIMAL(TRUE_COUNT)/DECIMAL(STOP_INDEX-START_INDEX)#PERCENTNTSTHATMATCHINANALYSISFRAME
RETURNVALIDITY

DEFMOB_INFO(ALIGNMENTS):
"""RETURNSALISTOFINFOABOUTANALIGNMENTANALYSISBASEDON
SEQUENCEHOMOLOGYTOMOBILEELEMENTS."""

READ=ALIGNMENTS[0]#THISISTHESANGERREAD
MOB_MUT_LIST=LIST()
FORRINRANGE(1,LEN(ALIGNMENTS)):
MOB=ALIGNMENTS[R]#THISISTHECURRENTMOBILEELEMENTWEWANTTOANALYZE
#ANALYZETHEALIGNMENTONLYINTHEREGIONOFTHEMOBILEELEMENT
MOB_INDICES=GET_INDICES(MOB)
READ_INDICES=GET_INDICES(READ)
#WEWANTINDICESTHATCAPTUREONLYPORTIONSOFTHEALIGNMENTWHEREBOTHSEQUENCES
#AREALIGNED.THISMAYOVERLOOKEDGEINSERTIONS/DELETIONS.
START=MAX(MOB_INDICES[0],READ_INDICES[0])
STOP=MIN(MOB_INDICES[1],READ_INDICES[1])
IF((STOP-START)<200):#NOTLONGENOUGHFORANYMEANINGFULANALYSIS
RETURN
#CALLANALYZE_SEQONOURREAD/MOBILEELEMENTTOGETINFOABOUTSEQUENCEHOMOLOGY
TEMP=LIST()
VALIDITY=ANALYZE_SEQ(MOB,READ,START,STOP,TEMP)
TEMP2=LIST()
FORMUTATIONINTEMP:
IFMOB.IDNOTINMUTATION:
PRINT"ERROR:",MUTATION

"""LISTCONTENTS:
[0]:IDOFSANGERREAD
[1]:IDOFMOBILEELEMENT
[2]:LISTOFMUTATIONSIDENTIFIEDBYANALYZINGMOBILEELEMENT
AGAINSTSANGERREADANDVALIDITYSCORE
[3]:FRACTIONOFCORRECTLYMATCHEDRESIDUES
[4]:OFFSETFROMBEGINNINGOFSANGERREADATWHICHTOTRUNCATEANALYSIS"""
MOB_MUT_LIST.APPEND([READ.ID,MOB.ID,TEMP,VALIDITY,START])
DEL(TEMP)
DEL(TEMP2)
CURR_LST=LIST()
CURR_LEN=9999999#DONOTUSETHISVALUEFOR"BIGDATA"ALIGNMENTS/ANALYSES

IFNOT(MOB_MUT_LIST):
RETURN
FORLSTINMOB_MUT_LIST:#FINDTHEMOBILEELEMENTWITHTHELEASTNUMBEROFMUTATIONS
IF(LEN(LST[2])<CURR_LEN):
CURR_LEN=LEN(LST[2])
CURR_LST=LST
IF(CURR_LSTANDCURR_LST[3]>=.45):#ISTHEMOBILEELEMENTACTUALLYHOMOLOGOUS?
DEL(MOB_MUT_LIST)
RETURNCURR_LST
DEL(MOB_MUT_LIST)
RETURN

DEFBUILD_MOB_EVIDENCE_DICT(ALIGNMENT_PATH):
MOB_EVIDENCE_DICT=DICT()
FORDIRNAME,SUBDIRLIST,FILELISTINOS.WALK(ALIGNMENT_PATH):
FORFINFILELIST:
IF"RM"INF:
#READ/MOBILEELEMENTALIGNMENT
#NEEDTODETERMINEIFANYHOMOLOGYTODONTANALYSIS
RM_ALIGNMENTS=ALIGNIO.READ(ALIGNMENT_PATH+F,"FASTA")
PRINT("GATHERINGMOBILEELEMENTHOMOLOGYDATAFORREAD"+
RM_ALIGNMENTS[0].ID+"AND"+RM_ALIGNMENTS[1].ID+"..."),
EVIDENCE=MOB_INFO(RM_ALIGNMENTS)
"""EVIDENCECONTAINS
[0]:IDOFSANGERREAD
[1]:IDOFMOBILEELEMENT
[2]:LISTOFMUTATIONSIDENTIFIEDBYANALYZINGMOBILEELEMENT
AGAINSTSANGERREADANDVALIDITYSCORE
[3]:OFFSETFROMBEGINNINGOFSANGERREADATWHICHTOTRUNCATEANALYSIS"""

IFNOT(EVIDENCEISNONE):
KEY=EVIDENCE[0]
VALUE=[EVIDENCE[1],EVIDENCE[2],EVIDENCE[3]]
MOB_EVIDENCE_DICT[KEY]=VALUE
PRINT"DONE."
RETURNMOB_EVIDENCE_DICT